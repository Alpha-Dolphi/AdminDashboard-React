(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Curves", "tsparticles-engine", "tsparticles-engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CurvesPathGenerator = void 0;
    const Curves_1 = require("./Curves");
    const tsparticles_engine_1 = require("tsparticles-engine");
    const tsparticles_engine_2 = require("tsparticles-engine");
    class CurvesPathGenerator {
        constructor() {
            this.options = {
                rndFunc: null,
                period: 100,
                nbHarmonics: 2,
                attenHarmonics: 0.8,
                lowValue: -0.03,
                highValue: 0.03,
            };
        }
        generate(p) {
            if (p.pathGen === undefined) {
                const options = this.options;
                p.pathGen = (0, Curves_1.CurvesPathGen)(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);
            }
            if (p.curveVelocity === undefined) {
                p.curveVelocity = tsparticles_engine_1.Vector.origin;
                p.curveVelocity.length = (0, tsparticles_engine_2.getRandom)() * 0.6 + 0.8;
                p.curveVelocity.angle = (0, tsparticles_engine_2.getRandom)() * Math.PI * 2;
            }
            else {
                p.curveVelocity.length += 0.01;
                p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % (Math.PI * 2);
            }
            p.velocity.x = 0;
            p.velocity.y = 0;
            return p.curveVelocity;
        }
        init(container) {
            var _a, _b, _c, _d, _e;
            const sourceOptions = container.actualOptions.particles.move.path.options;
            if (typeof sourceOptions.rndFunc === "function") {
                this.options.rndFunc = sourceOptions.rndFunc;
            }
            else if (typeof sourceOptions.rndFunc === "string") {
                this.options.rndFunc =
                    window[sourceOptions.rndFunc] || this.options.rndFunc;
            }
            this.options.period = (_a = sourceOptions.period) !== null && _a !== void 0 ? _a : this.options.period;
            this.options.nbHarmonics = (_b = sourceOptions.nbHarmonics) !== null && _b !== void 0 ? _b : this.options.nbHarmonics;
            this.options.attenHarmonics = (_c = sourceOptions.attenHarmonics) !== null && _c !== void 0 ? _c : this.options.attenHarmonics;
            this.options.lowValue = (_d = sourceOptions.lowValue) !== null && _d !== void 0 ? _d : this.options.lowValue;
            this.options.highValue = (_e = sourceOptions.highValue) !== null && _e !== void 0 ? _e : this.options.highValue;
        }
        reset(particle) {
            delete particle.pathGen;
            delete particle.curveVelocity;
        }
        update() {
        }
    }
    exports.CurvesPathGenerator = CurvesPathGenerator;
});
